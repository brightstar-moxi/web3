/// <reference types="node" />
import * as EventEmitter from "events";
export declare enum Chain {
    Testnet = "Testnet",
    Mainnet = "Mainnet"
}
export declare enum ChainID {
    BSC_Mainnet = 56,
    BSC_Testnet = 97
}
export declare enum RPCUrl {
    BSC_Mainnet = "https://bsc-dataseed.binance.org/",
    BSC_Testnet = "https://data-seed-prebsc-1-s1.binance.org:8545/"
}
export declare const MainnetConfig: any;
export declare const TestnetConfig: any;
export interface IPayment {
    id: number;
    from: string;
    to: string;
    amount: number;
    time: number;
    fee: number;
}
export declare enum CONTRACT_ADDRESS {
    Testnet = "0x85334EEB36e318cF6eA4c0DBD21D51891095dc05",
    MainNet = "0x85334EEB36e318cF6eA4c0DBD21D51891095dc05"
}
export declare enum GatewayUrl {
    BSC_Mainnet = "https://bnb.d-gate.org/",
    BSC_Testnet = "https://test-bnb.d-gate.org/"
}
export declare class DGateException extends Error {
    constructor(msg: string);
}
export declare class DGate {
    provider: any;
    private account;
    private gateway;
    contract: any;
    events: EventEmitter;
    constructor(walletAddress: string, chain?: Chain, contractAddress?: string);
    getPayment(id: number): Promise<IPayment>;
    getAllPayments(): Promise<IPayment[]>;
    static parseRawPayment(raw: any): IPayment;
    setAccount(address: string): void;
    onNewPayment(callback: (payment: IPayment) => void): void;
    static isSamePayment(a: IPayment | any, b: IPayment | any): boolean;
    createPaymentUrl(id: number, amount: number, redirect?: string): string;
}
